from dotenv import load_dotenv
import openai
import os
from pathlib import Path


class Utility:

    engines = None

    @staticmethod
    def set_openai_key(key: str = None):
        """Connects API Key With OpenAi"""
        env_path = Path('.') / '.env'
        load_dotenv(dotenv_path=env_path)
        openai.api_key = os.getenv("OPENAI_API_KEY")

    @staticmethod
    def set_openai_engines():
        """Updates available Engines w.r.t your API key's permissions."""
        Utility.engines = dict(
            enumerate(eng["id"] for eng in openai.Engine.list()["data"]))

    @staticmethod
    def get_openai_engines():
        """
        Checks to see if Utility.engines is populated.
        Else deletes class attribute & requests available Engines from OpenAI.
        Returns gathered Engines
        """
        if not Utility.engines:
            Utility.set_openai_engines()
        return Utility.engines

    @staticmethod
    def pick_engine():
        """Allows the User to pick an Engine"""
        [print(str(idx)+":", Utility.engines[idx]) for idx in Utility.engines]
        return Utility.engines[
            int(input("Enter the number for your desired Engine:\n>>> "))]

    @staticmethod
    def prepare_system():
        print("Preparing OpenAI Environment")
        Utility.set_openai_key()
        Utility.set_openai_engines()
        print("Engines found")


def test_all():
    Utility.set_openai_key()
    print('Utility.get_openai_engines(): ', Utility.get_openai_engines())
    print('Utility.pick_engine(): ', Utility.pick_engine())
    print(Utility.get_openai_engines())


def main():
    test_all()
    Utility.prepare_system()


if __name__ == '__main__':
    main()
