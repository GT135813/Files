from dotenv import load_dotenv
import openai
import os
from pathlib import Path


class Utility:

    def __init__(self):
        """Provides Engines without multiple calls to OpenAI"""
        self.api_key = self.set_openai_key()
        self.engines = self.set_openai_engines()

    def set_openai_key(self, key: str = None):
        """Connects API Key With OpenAi"""
        env_path = Path('.') / '.env'
        load_dotenv(dotenv_path=env_path)
        openai.api_key = os.getenv("OPENAI_API_KEY")

    def set_openai_engines(self):
        """Updates available Engines w.r.t your API key's permissions."""
        return dict(
            enumerate(eng["id"] for eng in openai.Engine.list()["data"])
        )

    def get_openai_engines(self):
        """Returns available Engines"""
        return self.engines

    def pick_engine(self):
        """Allows the User to pick an Engine"""
        [print(str(idx)+":", self.engines[idx]) for idx in self.engines]
        return self.engines[
            int(input("Enter the number for your desired Engine:\n>>> "))]

    def prepare_system(self):
        print("Preparing OpenAI Environment")
        self.set_openai_key()
        self.get_openai_engines()
        print("Engines found")


def test_all():
    test_util = Utility()
    print(test_util.get_openai_engines())
    print(test_util.pick_engine())
    


def main():
    test_all()


if __name__ == '__main__':
    main()
